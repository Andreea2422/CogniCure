<main id="main-discover">
  <% provide(:title, 'All users') %>
  <div class="my-account-header page-title normal-title font-serif">
    <div class="page-title-inner flex-row container">
      <div class="flex-col flex-grow text-center">
        <h1 class="uppercase mb-0">Meet all psychologists and therapists</h1>
      </div>
    </div>
  </div>

  <div class="main-content-flex mt-0 column-gap-0">
    <div id="filter-container" class="filter-doctors mx-2">
        <h3 class="title-form" style="color: white; text-align: center">Filter therapists by specialities</h3>
        <div class="row">
          <div class="form-group">
            <div class="grid-container gap-0 my-0 text-center text-uppercase" style="background-color: transparent;
              border: 5px solid #2b107c">
              <% @uniq_specialities.each do |spec| %>
                <div>
                  <label class="checkbox-button white">
                    <input type="checkbox" value="<%= spec %>">
                    <%= spec %>
                  </label>
                </div>
              <% end %>
            </div>
          </div>
        </div>
    </div>


    <div id="show-doctors">

        <%= render partial: 'doctors', locals: { doctors: @filtered_doctors } %>

    </div>


  </div>

</main>



<script type="text/javascript" charset="UTF-8">
    // localStorage.setItem('currentPage', "1");

    function updateURL(filter, pageNumber) {
        var encodedFilters = filter.map(function(f) {
            return encodeURIComponent(f);
        });

        var newURL = window.location.pathname;
        if (encodedFilters.length > 0) {
            newURL += '?filter=' + encodedFilters.join('%2C');
        }
        if (pageNumber) {
            newURL += (newURL.indexOf('?') === -1 ? '?' : '&') + 'page=' + pageNumber;
        }
        history.replaceState({}, '', newURL);
    }



    document.addEventListener('DOMContentLoaded', function() {
        // Create an empty array to store the selected values
        var selectedFilters = [];
        var urlParams = new URLSearchParams(window.location.search);
        var currentPage = urlParams.get('page');
        var filtersFromURL = urlParams.get('filter');
        selectedFilters = filtersFromURL ? filtersFromURL.split(',') : [];

        function updateFilters(filters,pagenr){
            $.ajax({
                type: 'GET',
                url: '/users',
                data: {
                    filter: filters,
                    page: pagenr
                },
                dataType: 'json',
                success: function(response) {
                    // console.log('success');
                    // console.log(response);
                    // Update the view with the new situation and choices from the response
                    $('#show-doctors').html(response.filtering);

                    // Reinitialize event listeners after updating the DOM
                    initializeEventListeners();
                },
                error: function(xhr, status, error) {
                    console.log("Error "+ error);
                }
            });
            updateURL(filters,pagenr)
        }

        // Function to initialize event listeners for pagination links
        function initializeEventListeners() {
            // Get all the pagination links
            var paginationLinks = document.querySelectorAll('.pagination a');
            paginationLinks.forEach(function(link) {
                link.addEventListener('click', function(event) {
                    event.preventDefault(); // Prevent default link behavior
                    var pageNumber = link.getAttribute('href').split('page=')[1];
                    console.log(pageNumber)
                    updateFilters(selectedFilters,pageNumber);
                });
            });
        }
        // Initialize event listeners on page load
        initializeEventListeners();

        if (currentPage) {
            updateFilters(selectedFilters,currentPage);
        } else {
            // If there's no stored page number, initialize with the first page
            updateFilters(selectedFilters,1);
        }

        // Update checkboxes visual
        var checkboxButtons = document.querySelectorAll('.checkbox-button');
        checkboxButtons.forEach(function(button) {
            var checkbox = button.querySelector('input[type="checkbox"]');

            // Check if the checkbox value is in the selectedFilters array
            if (selectedFilters.includes(checkbox.value)) {
                checkbox.checked = true; // Set 'checked' property to true
                checkbox.parentElement.classList.add('selected'); // Add 'selected' class to the parent element
            } else {
                checkbox.checked = false; // Set 'checked' property to false
                checkbox.parentElement.classList.remove('selected'); // Remove 'selected' class from the parent element
            }

            button.addEventListener('click', function() {
                // Toggle the 'selected' class on the button when it's clicked
                button.classList.toggle('selected', checkbox.checked);
            });
        });


        // Update the list of doctors based on the selected filters
        var checkboxes = document.querySelectorAll('input[type="checkbox"]');
        checkboxes.forEach(function(checkbox) {
            checkbox.checked = selectedFilters.includes(checkbox.value);
            checkbox.addEventListener('change', function() {
                // If the checkbox is checked, add its value to the selectedFilters array
                if (this.checked) {
                    selectedFilters.push(checkbox.value);
                    // Reset the current page for the selected filters
                    currentPage = 1;
                    updateFilters(selectedFilters, currentPage);
                } else {
                    // If the checkbox is unchecked, remove its value from the selectedFilters array
                    var index = selectedFilters.indexOf(checkbox.value);
                    if (index !== -1) {
                        selectedFilters.splice(index, 1);
                        // Reset the current page
                        currentPage = 1;
                        updateFilters(selectedFilters, currentPage);
                    }
                }
                console.log(selectedFilters);
            });
        });
    });


</script>
